
Prerequisites 
A Kubernetes service - I'm using Docker Desktop with Kubernetes in this walkthrough, but you can use one of the others.  Getting Started for a full listing.
Python 3.7 installed
Git installed
Containerizing an application
In this section you’ll take some source code, verify it runs locally, and then create a Docker image of the application. The sample application used is a very simple Flask web application; if you want to test it locally, you’ll need Python installed. Otherwise, you can skip to the "Create a Dockerfile" section.

Get the application code
Use git to clone the repository to your local machine:

Change to the app directory:

cd hello-python/app
There are only two files in this directory. If you look at the main.py file, you’ll see the application prints out a hello message. You can learn more about Flask on the Flask website.

from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello from Python!"

if __name__ == "__main__":
    app.run(host='0.0.0.0')
The requirements.txt file contains the list of packages needed by the main.py and will be used by pip to install the Flask library.

Note: When you start writing more advanced Python, you'll find it's not always recommended to use pip install and may want to use virtualenv (or pyenv) to install your dependencies in a virtual environment.
Run locally
Manually run the installer and application using the following commands:

pip install -r requirements.txt
python main.py
This will start a development web server hosting your application, which you will be able to see by navigating to http://localhost:5000. Because port 5000 is the default port for the development server, we didn’t need to specify it.

Create a Dockerfile
Now that you have verified the source code works, the first step in containerizing the application is to create a Dockerfile.

In the hello-python/app directory, create a file named Dockerfile with the following contents and save it:

FROM python:3.7

RUN mkdir /app
WORKDIR /app
ADD . /app/
RUN pip install -r requirements.txt

EXPOSE 5000
CMD ["python", "/app/main.py"]
This file is a set of instructions Docker will use to build the image. For this simple application, Docker is going to:

Get the official Python Base Image for version 3.7 from Docker Hub.
In the image, create a directory named app.
Set the working directory to that new app directory.
Copy the local directory’s contents to that new folder into the image.
Run the pip installer (just like we did earlier) to pull the requirements into the image.
Inform Docker the container listens on port 5000.
Configure the starting command to use when the container starts.
Create an image
At your command line or shell, in the hello-python/app directory, build the image with the following command:

docker build -f Dockerfile -t hello-python:latest .
Note: I'm using the :latest tag in this example, if you are not familiar with what it is you may want to read Docker: The latest Confusion.
This will perform those seven steps listed above and create the image. To verify the image was created, run the following command:

docker image ls
Docker image listing
The application is now containerized, which means it can now run in Docker and Kubernetes!

Running in Docker
Before jumping into Kubernetes, let’s verify it works in Docker. Run the following command to have Docker run the application in a container and map it to port 5001:

docker run -p 5001:5000 hello-python
Now navigate to http://localhost:5001, and you should see the “Hello from Python!” message